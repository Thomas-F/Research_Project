package edu.vcs.chemproject;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * A Computational Method for Predicting and Modeling Chemical Reactions
 * @author Akaash Venkat and Thomas Fahrner
 */
public class MainFrame extends javax.swing.JFrame {

    public ArrayList<String> combinations = new ArrayList<String>();
    ChemElement chemElementUno = new ChemElement();
    ChemElement chemElementDos = new ChemElement();
    PolyBondElement polyBondElement = new PolyBondElement();
    PolyIon polyIon = new PolyIon();
    String alpha, beta, gamma, delta;

    public String getAlpha() {
        return alpha;
    }

    public String getBeta() {
        return beta;
    }

    public String getGamma() {
        return gamma;
    }

    public String getDelta() {
        return delta;
    }

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        resultListBox.setName("Compound(s)");
        try {
            FileReader fr = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
            FileReader fr2 = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
            BufferedReader br = new BufferedReader(fr);
            String theLine = "";
            BufferedReader br2 = new BufferedReader(fr2);

            while ((theLine = br.readLine()) != null) {
                String[] lineParts = theLine.split(",");
                String elementName = lineParts[0];
                elementOneComboBox.addItem(elementName);
                elementTwoComboBox.addItem(elementName);
            }
            br.close();
            UpdateControlOptions();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        elementAndElement = new javax.swing.JRadioButton();
        elementAndPolyatomic = new javax.swing.JRadioButton();
        displacement = new javax.swing.JRadioButton();
        elementListPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        elementOneLabel = new javax.swing.JLabel();
        elementOneComboBox = new javax.swing.JComboBox();
        plusSign = new javax.swing.JLabel();
        analyzeButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        elementTwoLabel = new javax.swing.JLabel();
        elementTwoComboBox = new javax.swing.JComboBox();
        resultPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultListBox = new javax.swing.JList();
        imageLabel3D = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A Computational Method for Predicting and Modeling Chemical Reactions");
        setPreferredSize(new java.awt.Dimension(1100, 600));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Bonding Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel1.setLayout(new java.awt.GridLayout(3, 1));

        buttonGroup1.add(elementAndElement);
        elementAndElement.setSelected(true);
        elementAndElement.setText("Bond between Element and Element");
        elementAndElement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elementAndElementActionPerformed(evt);
            }
        });
        jPanel1.add(elementAndElement);

        buttonGroup1.add(elementAndPolyatomic);
        elementAndPolyatomic.setText("Bond between Element and Polyatomic Ion");
        elementAndPolyatomic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elementAndPolyatomicActionPerformed(evt);
            }
        });
        jPanel1.add(elementAndPolyatomic);

        buttonGroup1.add(displacement);
        displacement.setText("Simple Single or Double Displacement");
        displacement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displacementActionPerformed(evt);
            }
        });
        jPanel1.add(displacement);

        elementListPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Elements/Molecules", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        elementOneLabel.setText("Element One");

        elementOneComboBox.setEditable(true);
        elementOneComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                elementOneComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(elementOneLabel)
                    .addComponent(elementOneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(elementOneLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elementOneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        plusSign.setText("  +");

        analyzeButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        analyzeButton.setText("Analyze");
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        elementTwoLabel.setText("Element Two");

        elementTwoComboBox.setEditable(true);
        elementTwoComboBox.setName("Element Two"); // NOI18N
        elementTwoComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                elementTwoComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(elementTwoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(elementTwoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 49, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(elementTwoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(elementTwoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout elementListPanelLayout = new javax.swing.GroupLayout(elementListPanel);
        elementListPanel.setLayout(elementListPanelLayout);
        elementListPanelLayout.setHorizontalGroup(
            elementListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(elementListPanelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plusSign, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(280, 280, 280)
                .addComponent(analyzeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(elementListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(elementListPanelLayout.createSequentialGroup()
                    .addGap(296, 296, 296)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(128, Short.MAX_VALUE)))
        );
        elementListPanelLayout.setVerticalGroup(
            elementListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(elementListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, elementListPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(plusSign, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(analyzeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(elementListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(elementListPanelLayout.createSequentialGroup()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Compound(s)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        resultListBox.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resultListBoxValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(resultListBox);

        imageLabel3D.setBackground(new java.awt.Color(255, 255, 255));
        imageLabel3D.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        imageLabel3D.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Basic 3D Molecular Geometry", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        imageLabel.setBackground(new java.awt.Color(255, 255, 255));
        imageLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        imageLabel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Basic 2D Molecular Geometry", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        imageLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(imageLabel3D, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addContainerGap())
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(imageLabel3D, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        imageLabel.getAccessibleContext().setAccessibleName("imageLabel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resultPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(elementListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(948, 948, 948))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(elementListPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void elementAndElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elementAndElementActionPerformed
        if (elementAndElement.isSelected()) {
            imageLabel.setVisible(true);
            imageLabel3D.setVisible(true);
            ((TitledBorder)resultPanel.getBorder()).setTitle("Compound(s)");
            resultPanel.repaint();
            ((TitledBorder) elementListPanel.getBorder()).setTitle("Select two elements");
            elementListPanel.repaint();
            try {
                elementOneLabel.setText("Element One");
                elementOneComboBox.removeAllItems();
                elementTwoLabel.setText("Element Two");
                elementTwoComboBox.removeAllItems();
                FileReader fr = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
                BufferedReader br = new BufferedReader(fr);
                String theLine = "";
                while ((theLine = br.readLine()) != null) {
                    String[] lineParts = theLine.split(",");
                    String elementName = lineParts[0];
                    elementOneComboBox.addItem(elementName);
                    elementTwoComboBox.addItem(elementName);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        UpdateControlOptions();
    }//GEN-LAST:event_elementAndElementActionPerformed

    private void elementAndPolyatomicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elementAndPolyatomicActionPerformed
        if (elementAndPolyatomic.isSelected()) {
            imageLabel.setVisible(false);
            imageLabel3D.setVisible(false);
            ((TitledBorder)resultPanel.getBorder()).setTitle("Compound(s)");
            resultPanel.repaint();
            ((TitledBorder)elementListPanel.getBorder()).setTitle("Select an element and a polyatmoic ion");
            elementListPanel.repaint();
            try {
                elementTwoLabel.setText("Polyatomic Ion");
                elementTwoComboBox.removeAllItems();
                FileReader fr2 = new FileReader("db\\PolyAtomicDatabase.txt");
                BufferedReader br2 = new BufferedReader(fr2);
                String theLine = "";
                while ((theLine = br2.readLine()) != null) {
                    String[] lineParts = theLine.split(",");
                    String polyName = lineParts[0];
                    elementTwoComboBox.addItem(polyName);
                }

                elementOneLabel.setText("Element One");
                elementOneComboBox.removeAllItems();
                FileReader fr = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
                BufferedReader br = new BufferedReader(fr);
                while ((theLine = br.readLine()) != null) {
                    String[] lineParts = theLine.split(",");
                    String elementName = lineParts[0];
                    elementOneComboBox.addItem(elementName);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        UpdateControlOptions();
    }//GEN-LAST:event_elementAndPolyatomicActionPerformed

    private void displacementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displacementActionPerformed
        UpdateControlOptions();
        if (displacement.isSelected()) {
            imageLabel.setVisible(false);
            imageLabel3D.setVisible(false);
            ((TitledBorder)resultPanel.getBorder()).setTitle("Resulting Molecules");
            resultPanel.repaint();
            ((TitledBorder)elementListPanel.getBorder()).setTitle("Select two molecules");
            elementListPanel.repaint();
            elementOneLabel.setText("Molecule One");
            elementTwoLabel.setText("Molecule Two");
            elementOneComboBox.removeAllItems();
            elementTwoComboBox.removeAllItems();

            plusSign.setVisible(true);
        }

    }//GEN-LAST:event_displacementActionPerformed
    private void setResultList(String result) {
        Object results[] = new Object[1];
        results[0] = result;
        resultListBox.setListData(results);
    }
    private void elementOneComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_elementOneComboBoxItemStateChanged
        if (elementAndElement.isSelected() && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            try {
                String elementName = elementOneComboBox.getSelectedItem().toString();
                FileReader fr = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
                BufferedReader br = new BufferedReader(fr);
                String theLine = "";

                while ((theLine = br.readLine()) != null) {
                    String[] lineParts = theLine.split(",");

                    int[] oxStates = new int[lineParts.length - 6];
                    for (int i = 6; i < lineParts.length; i++) {
                        oxStates[i - 6] = Integer.parseInt(lineParts[i]);
                    }

                    if (elementName.equals(lineParts[0])) {
                        chemElementUno = new ChemElement(lineParts[0], lineParts[1],
                            Integer.parseInt(lineParts[2]), Integer.parseInt(lineParts[3]),
                            Integer.parseInt(lineParts[4]), Double.parseDouble(lineParts[5]), oxStates);
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (elementAndPolyatomic.isSelected() && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            try {
                String elementName = elementOneComboBox.getSelectedItem().toString();
                FileReader fr = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
                BufferedReader br = new BufferedReader(fr);
                String theLine = "";

                while ((theLine = br.readLine()) != null) {
                    String[] lineParts = theLine.split(",");

                    int[] oxStates = new int[lineParts.length - 4];
                    for (int i = 4; i < lineParts.length; i++) {
                        oxStates[i - 4] = Integer.parseInt(lineParts[i]);
                    }

                    if (elementName.equals(lineParts[0])) {
                        polyBondElement = new PolyBondElement(lineParts[0], lineParts[1],
                            Integer.parseInt(lineParts[2]), Double.parseDouble(lineParts[4]), oxStates);
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (displacement.isSelected() && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String moleculeName = elementOneComboBox.getSelectedItem().toString();
            ArrayList al = new ArrayList();
            Pattern myPattern = Pattern.compile("[A-Z][a-z]*");
            Matcher myMatcher = myPattern.matcher(moleculeName);
            while (myMatcher.find()) {
                al.add(myMatcher.group());
            }
            if (al.size() >= 2) {
                alpha = al.get(0).toString();
                beta = al.get(1).toString();
            } else {
                if (al.size() >= 1) {
                    alpha = al.get(0).toString();
                }
            }
        } else {
        }
    }//GEN-LAST:event_elementOneComboBoxItemStateChanged

    private void elementTwoComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_elementTwoComboBoxItemStateChanged
        if (elementAndElement.isSelected() && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            try {
                String elementName = elementTwoComboBox.getSelectedItem().toString();
                FileReader fr = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
                BufferedReader br = new BufferedReader(fr);
                String theLine = "";

                while ((theLine = br.readLine()) != null) {
                    String[] lineParts = theLine.split(",");

                    int[] oxStates = new int[lineParts.length - 6];
                    for (int i = 6; i < lineParts.length; i++) {
                        oxStates[i - 6] = Integer.parseInt(lineParts[i]);
                    }

                    if (elementName.equals(lineParts[0])) {
                        chemElementDos = new ChemElement(lineParts[0], lineParts[1], Integer.parseInt(lineParts[2]),
                            Integer.parseInt(lineParts[3]), Integer.parseInt(lineParts[4]),
                            Double.parseDouble(lineParts[5]), oxStates);
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (elementAndPolyatomic.isSelected() && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            try {
                String polyatomicName = elementTwoComboBox.getSelectedItem().toString();
                FileReader fr = new FileReader("db\\PolyAtomicDatabase.txt");
                BufferedReader br = new BufferedReader(fr);
                String theLine = "";

                while ((theLine = br.readLine()) != null) {
                    String[] lineParts = theLine.split(",");

                    if (polyatomicName.equals(lineParts[0])) {
                        polyIon = new PolyIon(lineParts[0], lineParts[1], Integer.parseInt(lineParts[2]), lineParts[3]);
                        break;
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (displacement.isSelected() && evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            String moleculeName = elementTwoComboBox.getSelectedItem().toString();
            ArrayList al = new ArrayList();
            Pattern myPattern = Pattern.compile("[A-Z][a-z]*");
            Matcher myMatcher = myPattern.matcher(moleculeName);
            while (myMatcher.find()) {
                al.add(myMatcher.group());
            }
            if (al.size() >= 2) {
                gamma = al.get(0).toString();
                delta = al.get(1).toString();
            } else {
                if (al.size() >= 1) {
                    gamma = al.get(0).toString();
                }
            }
        } else {
        }
    }//GEN-LAST:event_elementTwoComboBoxItemStateChanged

    private void resultListBoxValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_resultListBoxValueChanged
        if (elementAndElement.isSelected()) {
            imageLabel.setIcon(null);
            imageLabel3D.setIcon(null);
            String compound = resultListBox.getSelectedIndex() >= 0 ? resultListBox.getSelectedValue().toString() : "";
            if (compound == null || compound.isEmpty()) {
                return;
            }

            ArrayList al = new ArrayList();
            Pattern myPattern = Pattern.compile("((^[a-z][0-9]*)|(^[A-Z][a-z]*[0-9]*)|([A-Z][0-9]*{1}[a-z][0-9]*)|([A-Z][0-9]*+(?=([A-Z][a-z])|($))))");
            Matcher myMatcher = myPattern.matcher(compound);
            while (myMatcher.find()) {
                al.add(myMatcher.group());
            }

            String compoundSubsetUno = al.get(0).toString();
            String compoundSubsetDos = "";
            if (al.size() > 1) {
                compoundSubsetDos = al.get(1).toString();
            }

            String elementUno, elementDos;
            int numberUno, numberDos;

            String[] theArray = compoundSubsetUno.split("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)");
            if (theArray.length > 1) {
                elementUno = theArray[0].toString();
                numberUno = Integer.parseInt(theArray[1].toString());
            } else {
                elementUno = theArray[0].toString();
                numberUno = 1;
            }

            theArray = compoundSubsetDos.split("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)");
            if (theArray.length > 1) {
                elementDos = theArray[0].toString();
                numberDos = Integer.parseInt(theArray[1].toString());
            } else {
                elementDos = theArray[0].toString();
                numberDos = 1;
            }
            int totalValenceElectrons = 0;
            if (chemElementUno.getSymbol().equals(elementUno)) {
                totalValenceElectrons = chemElementUno.getValenceElectrons() * numberUno
                    + chemElementDos.getValenceElectrons() * numberDos;
            } else {
                totalValenceElectrons = chemElementDos.getValenceElectrons() * numberUno
                    + chemElementUno.getValenceElectrons() * numberDos;
            }
            int numberOfCentralBonds = 0;
            int electronsUsed = 0;
            if (numberUno > numberDos) {
                numberOfCentralBonds = numberUno;
                if (elementUno.equals("H") || elementUno.equals("He")) {
                    electronsUsed = numberOfCentralBonds * 2;
                } else {
                    if (numberUno <= 5)
                        electronsUsed = numberOfCentralBonds * 8;
                    else
                        electronsUsed = numberOfCentralBonds * 2;
                }
            } else {
                numberOfCentralBonds = numberDos;
                if (elementDos.equals("H") || elementDos.equals("He")) {
                    electronsUsed = numberOfCentralBonds * 2;
                } else {
                    if (numberDos <= 5)
                        electronsUsed = numberOfCentralBonds * 8;
                    else
                        electronsUsed = numberOfCentralBonds * 2;
                }
            }
            int elementsLeft = totalValenceElectrons - electronsUsed;
            int lonePairs = elementsLeft / 2;
            int stericNumber = numberOfCentralBonds + lonePairs;
            String imageFile = "images\\geo" + stericNumber + "" + lonePairs + ".jpg";
            String imageFile2 = "images\\3D-geo" + stericNumber + "" + lonePairs + ".jpg";
            try {
                BufferedImage myPicture = ImageIO.read(new File(imageFile));
                BufferedImage myPic2 = ImageIO.read(new File (imageFile2));
                imageLabel.setIcon(new ImageIcon(myPicture));
                imageLabel3D.setIcon(new ImageIcon(myPic2));
            } catch (Exception e1) {
                //JOptionPane.showMessageDialog(this,e1.getMessage()+ " " + imageFile);
                //return;

            }
    }


    }//GEN-LAST:event_resultListBoxValueChanged

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        // TODO add your handling code here:
        combinations.clear();
        resultListBox.setListData(new Object[0]);
        imageLabel.setIcon(null);
        imageLabel3D.setIcon(null);

        if (elementAndElement.isSelected()) {
            int[] oxStateUno = chemElementUno.getOxidationNumbers();
            int[] oxStateDos = chemElementDos.getOxidationNumbers();
            String symbolUno = chemElementUno.getSymbol();
            String symbolDos = chemElementDos.getSymbol();
            double electroUno = chemElementUno.getEnNumber();
            double electroDos = chemElementDos.getEnNumber();

            if (electroDos == electroUno) {
                ArrayList<String> resultList = new ArrayList<String>();
                if (symbolUno.equals("H") || symbolUno.equals("O") || symbolUno.equals("F")
                    || symbolUno.equals("Br") || symbolUno.equals("I") || symbolUno.equals("N")
                    || symbolUno.equals("Cl")) {
                    //System.out.print("This pure covalent bond is: ");
                    //isInputSameElement = true;
                    resultList.add(symbolUno + "2");

                    String imageFile = "images\\geo20.jpg";
                    String imageFile2 = "images\\3D-geo20.jpg";

                    try {
                        BufferedImage myPicture = ImageIO.read(new File(imageFile));
                        BufferedImage myPic2 = ImageIO.read(new File (imageFile2));
                        imageLabel.setIcon(new ImageIcon(myPicture));
                        imageLabel3D.setIcon(new ImageIcon(myPic2));
                    } catch (Exception e1) {
                        //JOptionPane.showMessageDialog(this,e1.getMessage()+ " " + imageFile);
                        //return;

                    }

                } else {
                    //System.out.println("This compound does not exist. Please run the program again.");
                    //isInputSameElement = true;
                }
                resultListBox.setListData(resultList.toArray());
            } else {
                //System.out.print("The possible bond(s) that the two elements can form is(are): ");
                for (int i = 0; i < oxStateUno.length; i++) {
                    for (int j = 0; j < oxStateDos.length; j++) {
                        if (electroDos > electroUno) {
                            if (oxStateUno[i] < 0 && oxStateDos[j] > 0) {
                                continue;
                            } else {
                                if (Math.abs(oxStateDos[j]) == Math.abs(oxStateUno[i])) {
                                    if (!combinations.contains(symbolUno + symbolDos)) {
                                        combinations.add(symbolUno + symbolDos);
                                    }
                                } else if ((Math.abs(oxStateDos[j]) % 2 == 0) && (Math.abs(oxStateUno[i]) % 2 == 0)) {
                                    int halfOxStateUno = (Math.abs(oxStateUno[i]) / 2);
                                    int halfOxStateDos = (Math.abs(oxStateDos[j]) / 2);
                                    if (halfOxStateUno == 1 && halfOxStateDos == 1) {
                                        if (!combinations.contains(symbolUno + symbolDos)) {
                                            combinations.add(symbolUno + symbolDos);
                                        }
                                    } else if (halfOxStateUno == 1) {
                                        if (!combinations.contains(symbolUno + halfOxStateDos + symbolDos)) {
                                            combinations.add(symbolUno + halfOxStateDos + symbolDos);
                                        }
                                    } else if (halfOxStateDos == 1) {
                                        if (!combinations.contains(symbolUno + symbolDos + halfOxStateUno)) {
                                            combinations.add(symbolUno + symbolDos + halfOxStateUno);
                                        }
                                    } else {
                                        if (!combinations.contains(symbolUno + halfOxStateDos + symbolDos + halfOxStateUno)) {
                                            combinations.add(symbolUno + halfOxStateDos + symbolDos + halfOxStateUno);
                                        }
                                    }
                                } else if (Math.abs(oxStateDos[j]) == 1) {
                                    if (!combinations.contains(symbolUno + symbolDos + Math.abs(oxStateUno[i]))) {
                                        combinations.add(symbolUno + symbolDos + Math.abs(oxStateUno[i]));
                                    }
                                } else if (Math.abs(oxStateUno[i]) == 1) {
                                    if (!combinations.contains(symbolUno + Math.abs(oxStateDos[j]) + symbolDos)) {
                                        combinations.add(symbolUno + Math.abs(oxStateDos[j]) + symbolDos);
                                    }
                                } else {
                                    if (!combinations.contains(symbolUno + Math.abs(oxStateDos[j]) + symbolDos + Math.abs(oxStateUno[i]))) {
                                        combinations.add(symbolUno + Math.abs(oxStateDos[j]) + symbolDos + Math.abs(oxStateUno[i]));
                                    }
                                }
                            }
                        } else {
                            if (oxStateDos[j] < 0 && oxStateUno[i] > 0) {
                                continue;
                            } else {
                                if (Math.abs(oxStateDos[j]) == Math.abs(oxStateUno[i])) {
                                    if (!combinations.contains(symbolDos + symbolUno)) {
                                        combinations.add(symbolDos + symbolUno);
                                    }
                                } else if (Math.abs(oxStateDos[j]) == 1) {
                                    if (!combinations.contains(symbolDos + Math.abs(oxStateUno[i]) + symbolUno)) {
                                        combinations.add(symbolDos + Math.abs(oxStateUno[i]) + symbolUno);
                                    }
                                } else if (Math.abs(oxStateUno[i]) == 1) {
                                    if (!combinations.contains(symbolDos + symbolUno + Math.abs(oxStateDos[j]))) {
                                        combinations.add(symbolDos + symbolUno + Math.abs(oxStateDos[j]));
                                    }
                                } else {
                                    if (!combinations.contains(symbolDos + Math.abs(oxStateUno[i]) + symbolUno + Math.abs(oxStateDos[j]))) {
                                        combinations.add(symbolDos + Math.abs(oxStateUno[i]) + symbolUno + Math.abs(oxStateDos[j]));
                                    }
                                }
                            }
                        }
                    }
                }
                resultListBox.setListData(combinations.toArray());
                /*for (int i = 0; i < combinations.size(); i++) {
                 resultComboBox.addItem(combinations.get(i));
                 }*/
            }

        } else if (elementAndPolyatomic.isSelected()) {
            int[] oxStateElement = polyBondElement.getOxidationNumbers();
            String symbolElement = polyBondElement.getSymbol();
            String nameElement = polyBondElement.getName();
            int ionicState = polyIon.getOxidationNumbers();
            String symbolPolyIon = polyIon.getRevisedSymbol();
            String namePolyIon = polyIon.getName();

            for (int i = 0; i < oxStateElement.length; i++) {
                if (ionicState > 0) {
                    if (Math.abs(ionicState) == Math.abs(oxStateElement[i])) {
                        if (!combinations.contains(symbolPolyIon + " " + symbolElement)) {
                            combinations.add(symbolPolyIon + " " + symbolElement);
                        }
                    } else if ((Math.abs(ionicState) % 2 == 0) && (Math.abs(oxStateElement[i]) % 2 == 0)) {
                        int halfOxStateUno = (Math.abs(ionicState) / 2);
                        int halfOxStateDos = (Math.abs(oxStateElement[i]) / 2);
                        String combination = symbolPolyIon + (halfOxStateDos == 1 ? "" : halfOxStateDos) + " " + symbolElement + (halfOxStateUno == 1 ? "" : halfOxStateUno);
                        if (!combinations.contains(combination)) {
                            combinations.add(combination);
                        }
                    } else if (Math.abs(oxStateElement[i]) == 1) {
                        if (!combinations.contains(symbolPolyIon + " " + symbolElement + Math.abs(ionicState))) {
                            combinations.add(symbolPolyIon + " " + symbolElement + Math.abs(ionicState));
                        }
                    } else if (Math.abs(ionicState) == 1) {
                        if (!combinations.contains(symbolPolyIon + Math.abs(oxStateElement[i]) + " " + symbolElement)) {
                            combinations.add(symbolPolyIon + Math.abs(oxStateElement[i]) + " " + symbolElement);
                        }
                    } else {
                        if (!combinations.contains(symbolPolyIon + Math.abs(oxStateElement[i]) + " " + symbolElement + Math.abs(ionicState))) {
                            combinations.add(symbolPolyIon + Math.abs(oxStateElement[i]) + " " + symbolElement + Math.abs(ionicState));
                        }
                    }
                } else if (ionicState < 0) {
                    if (Math.abs(ionicState) == Math.abs(oxStateElement[i])) {
                        if (!combinations.contains(symbolElement + " " + symbolPolyIon)) {
                            combinations.add(symbolElement + " " + symbolPolyIon);
                        }
                    } else if ((Math.abs(ionicState) % 2 == 0) && (Math.abs(oxStateElement[i]) % 2 == 0)) {
                        int halfOxStateUno = (Math.abs(ionicState) / 2);
                        int halfOxStateDos = (Math.abs(oxStateElement[i]) / 2);
                        String combination = symbolPolyIon + (halfOxStateDos == 1 ? "" : halfOxStateDos) + " " + symbolElement + (halfOxStateUno == 1 ? "" : halfOxStateUno);
                        if (!combinations.contains(combination)) {
                            combinations.add(combination);
                        }
                    } else if (Math.abs(oxStateElement[i]) == 1) {
                        if (!combinations.contains(symbolElement + Math.abs(ionicState) + " " + symbolPolyIon)) {
                            combinations.add(symbolElement + Math.abs(ionicState) + " " + symbolPolyIon);
                        }
                    } else if (Math.abs(ionicState) == 1) {
                        if (!combinations.contains(symbolElement + " " + symbolPolyIon + Math.abs(oxStateElement[i]))) {
                            combinations.add(symbolElement + " " + symbolPolyIon + Math.abs(oxStateElement[i]));
                        }
                    } else {
                        if (!combinations.contains(symbolElement + Math.abs(ionicState) + " " + symbolPolyIon + Math.abs(oxStateElement[i]))) {
                            combinations.add(symbolElement + Math.abs(ionicState) + " " + symbolPolyIon + Math.abs(oxStateElement[i]));
                        }
                    }
                } else {
                }
            }

            resultListBox.setListData(combinations.toArray());
            /*for (int i = 0; i < combinations.size(); i++) {
             resultComboBox.addItem(combinations.get(i));
             }*/
        } else if (displacement.isSelected()) {
            if (getAlpha() == null || getAlpha().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid molecular formula for Molecule One");
                return;
            }
            if (getGamma() == null || getGamma().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid molecular formula for Molecule Two");
                return;
            }

            //else
            {
                try {
                    FileReader fr = new FileReader("db\\ElementDatabaseForPolyAtomicBonds.txt");
                    BufferedReader br = new BufferedReader(fr);
                    String theLine = "";

                    int reactivityNumberUno = 0;
                    int reactivityNumberDos = 0;
                    int reactivityNumberTres = 0;
                    int reactivityNumberCuatro = 0;

                    while ((theLine = br.readLine()) != null) {
                        String[] lineParts = theLine.split(",");
                        
                        if (getBeta() == null && getDelta() == null) {
                            if (getAlpha().equals(lineParts[1])) {
                                reactivityNumberUno = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getGamma().equals(lineParts[1])) {
                                reactivityNumberDos = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                        } else if (getBeta() == null) {
                            if (getAlpha().equals(lineParts[1])) {
                                reactivityNumberUno = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getGamma().equals(lineParts[1])) {
                                reactivityNumberDos = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getDelta().equals(lineParts[1])) {
                                reactivityNumberCuatro = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                        } else if (getDelta() == null) {
                            if (getAlpha().equals(lineParts[1])) {
                                reactivityNumberUno = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getBeta().equals(lineParts[1])) {
                                reactivityNumberTres = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getGamma().equals(lineParts[1])) {
                                reactivityNumberDos = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                        } else {
                            if (getAlpha().equals(lineParts[1])) {
                                reactivityNumberUno = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getBeta().equals(lineParts[1])) {
                                reactivityNumberTres = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getGamma().equals(lineParts[1])) {
                                reactivityNumberDos = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                            if (getDelta().equals(lineParts[1])) {
                                reactivityNumberCuatro = Integer.parseInt(lineParts[4]);
                                continue;
                            }
                        }
                    }
                    
                    if (reactivityNumberDos < 100) {
                        if (reactivityNumberDos > reactivityNumberUno) {
                            if (getDelta() == null && getBeta() == null) {
                                setResultList(getAlpha() + " + " + getGamma());
                            } else if (getDelta() == null) {
                                setResultList(getGamma() + getBeta() + " + " + getAlpha());
                            } else if (getBeta() == null) {
                                setResultList(getGamma() + getDelta() + " + " + getAlpha());
                            } else {
                                setResultList(getAlpha() + getDelta() + " + " + getGamma() + getBeta());
                            }
                        } else if (reactivityNumberDos < reactivityNumberUno) {
                            if (getDelta() == null && getBeta() == null) {
                                setResultList(getAlpha() + " + " + getGamma());
                            } else if (getDelta() == null) {
                                setResultList(getAlpha() + getBeta() + " + " + getGamma());
                            } else if (getBeta() == null) {
                                setResultList(getAlpha() + getDelta() + " + " + getGamma());
                            } else {
                                setResultList(getAlpha() + getDelta() + " + " + getGamma() + getBeta());
                            }
                        }
                    } else {
                        if (reactivityNumberDos > reactivityNumberTres) {
                            if (getDelta() == null && getBeta() == null) {
                                setResultList(getAlpha() + " + " + getGamma());
                            } else if (getDelta() == null) {
                                setResultList(getAlpha() + getGamma() + " + " + getBeta());
                            } else if (getBeta() == null) {
                                setResultList(getDelta() + " + " + getGamma() + getAlpha());
                            } else {
                                setResultList(getAlpha() + getDelta() + " + " + getGamma() + getBeta());
                            }
                        } else if (reactivityNumberDos < reactivityNumberUno) {
                            if (getDelta() == null && getBeta() == null) {
                                setResultList(getAlpha() + " + " + getGamma());
                            } else if (getDelta() == null) {
                                setResultList(getAlpha() + getBeta() + " + " + getGamma());
                            } else if (getBeta() == null) {
                                setResultList(getAlpha() + getDelta() + " + " + getGamma());
                            } else {
                                setResultList(getAlpha() + getDelta() + " + " + getGamma() + getBeta());
                            }
                        } else {
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        if(resultListBox.getModel().getSize() > 0)
            resultListBox.setSelectedIndex(0);
    }//GEN-LAST:event_analyzeButtonActionPerformed

    private void UpdateControlOptions() {
        resultListBox.setListData(new Object[0]);
        imageLabel.setIcon(null);
        imageLabel3D.setIcon(null);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton displacement;
    private javax.swing.JRadioButton elementAndElement;
    private javax.swing.JRadioButton elementAndPolyatomic;
    private javax.swing.JPanel elementListPanel;
    private javax.swing.JComboBox elementOneComboBox;
    private javax.swing.JLabel elementOneLabel;
    private javax.swing.JComboBox elementTwoComboBox;
    private javax.swing.JLabel elementTwoLabel;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel imageLabel3D;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel plusSign;
    private javax.swing.JList resultListBox;
    private javax.swing.JPanel resultPanel;
    // End of variables declaration//GEN-END:variables
}
